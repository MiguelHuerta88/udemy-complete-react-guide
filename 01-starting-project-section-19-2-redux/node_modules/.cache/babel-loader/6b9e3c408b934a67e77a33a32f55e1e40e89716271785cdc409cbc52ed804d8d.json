{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// reducer\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// create slice has an internal IMER tool that allows us to seem like we are mutating state. But internally\n// its creating immutable objects for us\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// AUTH store\nconst authInitialState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({});\n\n// When we have multiple slices we will run into issues. Since we can only pass single slice to createStore()\n// so we instead use configureStore\n/*\n  configureStore({\n    reducer: {\n      counter: counterSlice.reducer,\n      ...\n    }\n  })\n */\n// creating store\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\n\n// export to allow connecting to it\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authInitialState","isAuthenticated","authSlice","store","reducer","counterActions","actions"],"sources":["/Users/miguelhuerta/Desktop/code/react-complete-guide-udemy/01-starting-project-section-19-2-redux/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// reducer\nconst initialState = {\n  counter: 0,\n  showCounter: true,\n};\n\n// create slice has an internal IMER tool that allows us to seem like we are mutating state. But internally\n// its creating immutable objects for us\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n// AUTH store\nconst authInitialState = {\n  isAuthenticated: false,\n};\nconst authSlice = createSlice({});\n\n// When we have multiple slices we will run into issues. Since we can only pass single slice to createStore()\n// so we instead use configureStore\n/*\n  configureStore({\n    reducer: {\n      counter: counterSlice.reducer,\n      ...\n    }\n  })\n */\n// creating store\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n});\n\nexport const counterActions = counterSlice.actions;\n\n// export to allow connecting to it\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACf,CAAC;;AAED;AACA;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfJ,YAAY,EAAEA,YAAY;EAC1BK,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,MAAMW,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AACD,MAAMC,SAAS,GAAGjB,WAAW,CAAC,CAAC,CAAC,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkB,KAAK,GAAGjB,cAAc,CAAC;EAC3BkB,OAAO,EAAEd,YAAY,CAACc;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGf,YAAY,CAACgB,OAAO;;AAElD;AACA,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}