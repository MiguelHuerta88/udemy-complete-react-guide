{"ast":null,"code":"var _jsxFileName = \"/Users/miguelhuerta/Desktop/code/react-complete-guide-udemy/12-adv-starting-project-section-21-2/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n\n  /*if (data.isError) {\n    return <p>{data.message}</p>;\n  }*/\n  // before when we wrent using defer.\n  //return <EventsList events={data.events} />;\n  // when we use defer we have to use Await component\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  // we can use any Client, browser APIs side code here. But we cant use react hooks i.e useState()\n  // ie. localStorage, cookies\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // one way to handle errors\n    //return { isError: true, message: \"Could not fetch events\" };\n    // building responses like this can be cumbersome so react-router-dom has a utility function json\n    /*throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n      status: 500,\n    });*/\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    // we can return it since browser supports Response() object responses.\n    // then in page were we call it we extract the data\n    return response;\n  }\n}\nexport function loader() {\n  // we moved the call that was blocking page loading into loadEvents() and we\n  // used defer\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","Suspense","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/miguelhuerta/Desktop/code/react-complete-guide-udemy/12-adv-starting-project-section-21-2/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  /*if (data.isError) {\n    return <p>{data.message}</p>;\n  }*/\n  // before when we wrent using defer.\n  //return <EventsList events={data.events} />;\n  // when we use defer we have to use Await component\n  return (\n    <Suspense fallback={<p>Loading....</p>}>\n      <Await resolve={events}>\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\n      </Await>\n    </Suspense>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  // we can use any Client, browser APIs side code here. But we cant use react hooks i.e useState()\n  // ie. localStorage, cookies\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // one way to handle errors\n    //return { isError: true, message: \"Could not fetch events\" };\n    // building responses like this can be cumbersome so react-router-dom has a utility function json\n    /*throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n      status: 500,\n    });*/\n    throw json({ message: \"Could not fetch events\" }, { status: 500 });\n  } else {\n    // we can return it since browser supports Response() object responses.\n    // then in page were we call it we extract the data\n    return response;\n  }\n}\n\nexport function loader() {\n  // we moved the call that was blocking page loading into loadEvents() and we\n  // used defer\n  return defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGV,aAAa,CAAC,CAAC;;EAElC;AACF;AACA;EACE;EACA;EACA;EACA,oBACEO,OAAA,CAACH,QAAQ;IAACO,QAAQ,eAAEJ,OAAA;MAAAK,QAAA,EAAG;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eACrCL,OAAA,CAACJ,KAAK;MAACc,OAAO,EAAEP,MAAO;MAAAE,QAAA,EACnBM,YAAY,iBAAKX,OAAA,CAACF,UAAU;QAACK,MAAM,EAAEQ;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACP,EAAA,CAhBQD,UAAU;EAAA,QACER,aAAa;AAAA;AAAAmB,EAAA,GADzBX,UAAU;AAkBnB,eAAeA,UAAU;AAEzB,eAAeY,UAAUA,CAAA,EAAG;EAC1B;EACA;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;AACJ;AACA;IACI,MAAMtB,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpE,CAAC,MAAM;IACL;IACA;IACA,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB;EACA;EACA,OAAOxB,KAAK,CAAC;IACXQ,MAAM,EAAEU,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}