{"ast":null,"code":"var _jsxFileName = \"/Users/miguelhuerta/Desktop/code/react-complete-guide-udemy/12-adv-starting-project-section-21-2/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { Await, redirect, useLoaderData, useParams, useRouteLoaderData } from \"react-router-dom\";\nimport { json } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { defer } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EventDetailPage() {\n  _s();\n  // when we had single loadEvent call.\n  const params = useParams();\n  //const data = useRouteLoaderData(\"event-detail\");\n  //return <EventItem event={data.event} />;\n\n  // showing how using defer can be good when multiple things must load\n  const {\n    event,\n    events\n  } = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: () => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading event...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: event,\n        children: loadedEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n          event: loadedEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: () => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading events...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: events,\n        children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"AF6fw8Ycq2+TZxARC8Z305W19DU=\", false, function () {\n  return [useParams, useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport async function eventDetailLoader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  return defer({\n    event: await loadEvent(id),\n    events: loadEvents()\n  });\n}\nexport async function eventDetailDeleteAction({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + id, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete event\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}\nasync function loadEvents() {\n  // we can use any Client, browser APIs side code here. But we cant use react hooks i.e useState()\n  // ie. localStorage, cookies\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // one way to handle errors\n    //return { isError: true, message: \"Could not fetch events\" };\n    // building responses like this can be cumbersome so react-router-dom has a utility function json\n    /*throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n      status: 500,\n    });*/\n    throw json({\n      message: \"Could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    // we can return it since browser supports Response() object responses.\n    // then in page were we call it we extract the data\n    // return response; // also this no longer works when using defer. We have to parse the data\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nasync function loadEvent(id) {\n  const response = await fetch(`http://localhost:8080/events/${id}`);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch details for selected event\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.event;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["Await","redirect","useLoaderData","useParams","useRouteLoaderData","json","EventItem","EventsList","defer","Suspense","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","params","event","events","children","fallback","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvent","loadedEvents","_c","eventDetailLoader","request","id","eventId","loadEvent","loadEvents","eventDetailDeleteAction","response","fetch","method","ok","message","status","resData","$RefreshReg$"],"sources":["/Users/miguelhuerta/Desktop/code/react-complete-guide-udemy/12-adv-starting-project-section-21-2/frontend/src/pages/EventDetail.js"],"sourcesContent":["import {\n  Await,\n  redirect,\n  useLoaderData,\n  useParams,\n  useRouteLoaderData,\n} from \"react-router-dom\";\nimport { json } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { defer } from \"react-router-dom\";\nimport { Suspense } from \"react\";\n\nexport default function EventDetailPage() {\n  // when we had single loadEvent call.\n  const params = useParams();\n  //const data = useRouteLoaderData(\"event-detail\");\n  //return <EventItem event={data.event} />;\n\n  // showing how using defer can be good when multiple things must load\n  const { event, events } = useRouteLoaderData(\"event-detail\");\n  return (\n    <>\n      <Suspense\n        fallback={() => <p style={{ textAlign: \"center\" }}>Loading event...</p>}\n      >\n        <Await resolve={event}>\n          {(loadedEvent) => <EventItem event={loadedEvent} />}\n        </Await>\n      </Suspense>\n      <Suspense\n        fallback={() => (\n          <p style={{ textAlign: \"center\" }}>Loading events...</p>\n        )}\n      >\n        <Await resolve={events}>\n          {(loadedEvents) => <EventsList events={loadedEvents} />}\n        </Await>\n      </Suspense>\n    </>\n  );\n}\n\nexport async function eventDetailLoader({ request, params }) {\n  const id = params.eventId;\n\n  return defer({\n    event: await loadEvent(id),\n    events: loadEvents(),\n  });\n}\n\nexport async function eventDetailDeleteAction({ request, params }) {\n  const id = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + id, {\n    method: request.method,\n  });\n\n  if (!response.ok) {\n    throw json({ message: \"Could not delete event\" }, { status: 500 });\n  }\n\n  return redirect(\"/events\");\n}\n\nasync function loadEvents() {\n  // we can use any Client, browser APIs side code here. But we cant use react hooks i.e useState()\n  // ie. localStorage, cookies\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // one way to handle errors\n    //return { isError: true, message: \"Could not fetch events\" };\n    // building responses like this can be cumbersome so react-router-dom has a utility function json\n    /*throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n      status: 500,\n    });*/\n    throw json({ message: \"Could not fetch events\" }, { status: 500 });\n  } else {\n    // we can return it since browser supports Response() object responses.\n    // then in page were we call it we extract the data\n    // return response; // also this no longer works when using defer. We have to parse the data\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\nasync function loadEvent(id) {\n  const response = await fetch(`http://localhost:8080/events/${id}`);\n\n  if (!response.ok) {\n    throw json(\n      { message: \"Could not fetch details for selected event\" },\n      { status: 500 }\n    );\n  } else {\n    const resData = await response.json();\n    return resData.event;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}