{"ast":null,"code":"var _jsxFileName = \"/Users/miguelhuerta/Desktop/code/react-complete-guide-udemy/01-starting-project-section-9-1/src/App.js\",\n  _s = $RefreshSig$();\nimport Header from \"./components/Header/Header\";\nimport Investments from \"./components/Investments/Investments\";\nimport NewInvestmentForm from \"./components/NewInvesmentForm/NewInvestmentForm\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // states\n  const [investments, setInvestments] = useState([]);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput.currentSavings; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput.yearlyContributions; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput.expectedReturn / 100;\n    const duration = +userInput.duration;\n    let USDollar = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    });\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      /*yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: USDollar.format(yearlyInterest),\n        savingsEndOfYear: USDollar.format(currentSavings),\n        yearlyContribution: USDollar.format(yearlyContribution),\n        investedCapital: USDollar.format(currentSavings - yearlyInterest)\n      });*/\n\n      // new format\n      yearlyData.push({\n        year: i + 1,\n        totalSavings: USDollar.format(currentSavings),\n        yearlyInterest: USDollar.format(yearlyInterest),\n        totalInterest: USDollar.format(yearlyInterest + yearlyData[i - 1].yearlyInterest),\n        investedCapital: USDollar.format(currentSavings - yearlyInterest)\n      });\n    }\n\n    // do something with yearlyData ...\n    setInvestments(yearlyData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewInvestmentForm, {\n      onAddNewInvestment: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Investments, {\n      investments: investments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9IfJzbCaapGdA9EkR+qAjzWd4bE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Investments","NewInvestmentForm","useState","jsxDEV","_jsxDEV","App","_s","investments","setInvestments","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","yearlyContributions","expectedReturn","duration","USDollar","Intl","NumberFormat","style","currency","i","yearlyInterest","push","year","totalSavings","format","totalInterest","investedCapital","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddNewInvestment","_c","$RefreshReg$"],"sources":["/Users/miguelhuerta/Desktop/code/react-complete-guide-udemy/01-starting-project-section-9-1/src/App.js"],"sourcesContent":["import Header from \"./components/Header/Header\";\nimport Investments from \"./components/Investments/Investments\";\nimport NewInvestmentForm from \"./components/NewInvesmentForm/NewInvestmentForm\";\nimport {useState} from \"react\";\n\nfunction App() {\n  // states\n  const [investments, setInvestments] = useState([]);\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput.currentSavings; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput.yearlyContributions; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput.expectedReturn / 100;\n    const duration = +userInput.duration;\n\n    let USDollar = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    });\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      /*yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: USDollar.format(yearlyInterest),\n        savingsEndOfYear: USDollar.format(currentSavings),\n        yearlyContribution: USDollar.format(yearlyContribution),\n        investedCapital: USDollar.format(currentSavings - yearlyInterest)\n      });*/\n\n      // new format\n      yearlyData.push({\n        year: i + 1,\n        totalSavings: USDollar.format(currentSavings),\n        yearlyInterest: USDollar.format(yearlyInterest),\n        totalInterest: USDollar.format(yearlyInterest + yearlyData[i-1].yearlyInterest),\n        investedCapital: USDollar.format(currentSavings - yearlyInterest)\n      })\n    }\n\n    // do something with yearlyData ...\n    setInvestments(yearlyData);\n  };\n\n  return (\n    <div>\n      <Header/>\n      <NewInvestmentForm onAddNewInvestment={calculateHandler}/>\n      <Investments investments={investments}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,WAAW,MAAM,sCAAsC;AAC9D,OAAOC,iBAAiB,MAAM,iDAAiD;AAC/E,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMO,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAACE,cAAc,CAAC,CAAC;IAChD,MAAMC,kBAAkB,GAAG,CAACH,SAAS,CAACI,mBAAmB,CAAC,CAAC;IAC3D,MAAMC,cAAc,GAAG,CAACL,SAAS,CAACK,cAAc,GAAG,GAAG;IACtD,MAAMC,QAAQ,GAAG,CAACN,SAAS,CAACM,QAAQ;IAEpC,IAAIC,QAAQ,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;MAC5CC,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,EAAEM,CAAC,EAAE,EAAE;MAEjC,MAAMC,cAAc,GAAGX,cAAc,GAAGG,cAAc;MACtDH,cAAc,IAAIW,cAAc,GAAGV,kBAAkB;MACrD;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM;MACAF,UAAU,CAACa,IAAI,CAAC;QACdC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXI,YAAY,EAAET,QAAQ,CAACU,MAAM,CAACf,cAAc,CAAC;QAC7CW,cAAc,EAAEN,QAAQ,CAACU,MAAM,CAACJ,cAAc,CAAC;QAC/CK,aAAa,EAAEX,QAAQ,CAACU,MAAM,CAACJ,cAAc,GAAGZ,UAAU,CAACW,CAAC,GAAC,CAAC,CAAC,CAACC,cAAc,CAAC;QAC/EM,eAAe,EAAEZ,QAAQ,CAACU,MAAM,CAACf,cAAc,GAAGW,cAAc;MAClE,CAAC,CAAC;IACJ;;IAEA;IACAf,cAAc,CAACG,UAAU,CAAC;EAC5B,CAAC;EAED,oBACEP,OAAA;IAAA0B,QAAA,gBACE1B,OAAA,CAACL,MAAM;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACT9B,OAAA,CAACH,iBAAiB;MAACkC,kBAAkB,EAAE1B;IAAiB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC1D9B,OAAA,CAACJ,WAAW;MAACO,WAAW,EAAEA;IAAY;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV;AAAC5B,EAAA,CAtDQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAwDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}